---
interface Props {
  type?: "info" | "note" | "danger" | "success" | "warning" | "tip" | "quote";
  title?: string;
  icon?: string;
  variant?: "default" | "minimal" | "filled" | "outline";
  collapsible?: boolean;
  expanded?: boolean;
}

const {
  type = "info",
  title,
  icon,
  variant = "default",
  collapsible = false,
  expanded = true,
} = Astro.props;

// Enhanced SVG icons for each type.
const icons = {
  info: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="10"></circle>
    <path d="M12 16v-4"></path>
    <path d="M12 8h.01"></path>
  </svg>`,

  note: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M12 8v4"></path>
    <path d="M12 16h.01"></path>
    <path d="M6.4 20a9 9 0 1 1 11.2 0Z"></path>
  </svg>`,

  danger: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
    <path d="M12 9v4"></path>
    <path d="M12 17h.01"></path>
  </svg>`,

  success: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M20 6 9 17l-5-5"></path>
  </svg>`,

  warning: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
    <path d="M12 9v4"></path>
    <path d="M12 17h.01"></path>
  </svg>`,

  tip: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M9 12l2 2 4-4"></path>
    <path d="M21 12c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z"></path>
    <path d="M3 12c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z"></path>
    <path d="M12 21c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z"></path>
    <path d="M12 3c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z"></path>
    <path d="M18.364 18.364c.39.39 1.024.39 1.414 0s.39-1.024 0-1.414-.39-1.024-1.414 0-1.024.39 0 1.414z"></path>
    <path d="M4.222 4.222c.39.39 1.024.39 1.414 0s.39-1.024 0-1.414-.39-1.024-1.414 0-1.024.39 0 1.414z"></path>
    <path d="M18.364 4.222c.39-.39.39-1.024 0-1.414s-1.024-.39-1.414 0-.39 1.024 0 1.414 1.024.39 1.414 0z"></path>
    <path d="M4.222 18.364c.39-.39.39-1.024 0-1.414s-1.024-.39-1.414 0-.39 1.024 0 1.414 1.024.39 1.414 0z"></path>
  </svg>`,

  quote: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path>
    <path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path>
  </svg>`,
};

// Generate unique ID for collapsible functionality.
const calloutId = `callout-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class={`new-callout callout-${type} variant-${variant} ${collapsible ? "collapsible" : ""} not-content`}
>
  {
    collapsible ? (
      <button
        class="callout-toggle"
        type="button"
        aria-expanded={expanded}
        aria-controls={calloutId}
      >
        <div class="callout-header">
          <div class="callout-icon" set:html={icon || icons[type]} />
          {title && <div class="callout-title">{title}</div>}
          <svg
            class="toggle-icon"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="m6 9 6 6 6-6" />
          </svg>
        </div>
      </button>
    ) : (
      <div class="callout-header">
        <div class="callout-icon" set:html={icon || icons[type]} />
        {title && <div class="callout-title">{title}</div>}
      </div>
    )
  }

  <div
    class="callout-content"
    id={calloutId}
    data-expanded={collapsible ? expanded : true}
  >
    <div class="callout-body">
      <slot />
    </div>
  </div>
</div>

<style>
  @layer nebula {
    /* CSS Custom Properties with Starlight integration */
    .new-callout {
      /* Base colors with Starlight fallbacks */
      --callout-bg: var(--sl-color-bg, #ffffff);
      --callout-text: var(--sl-color-text, #1e293b);
      --callout-border: var(--sl-color-gray-5, rgba(148, 163, 184, 0.3));
      --callout-shadow: rgba(0, 0, 0, 0.08);
      --callout-shadow-hover: rgba(0, 0, 0, 0.12);

      /* Type-specific colors */
      --callout-accent: var(--sl-color-accent, #3b82f6);
      --callout-accent-bg: color-mix(
        in srgb,
        var(--callout-accent) 8%,
        transparent
      );
      --callout-accent-border: color-mix(
        in srgb,
        var(--callout-accent) 30%,
        transparent
      );
    }

    /* Base callout styles */
    .new-callout {
      display: block;
      margin-bottom: 0.5rem !important;
      border-radius: 8px;
      font-size: 0.95rem;
      line-height: 1.6;
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      overflow: hidden;
      backdrop-filter: blur(10px);
    }

    .callout-header {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.5rem 1rem 0.1rem;
      font-weight: 600;
    }

    .callout-toggle {
      width: 100%;
      background: none;
      border: none;
      cursor: pointer;
      text-align: left;
      transition: all 0.2s ease;
    }

    .callout-toggle:hover {
      background: color-mix(in srgb, var(--callout-accent) 5%, transparent);
    }

    .callout-toggle:focus-visible {
      outline: 2px solid var(--callout-accent);
      outline-offset: -2px;
    }

    .callout-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: var(--callout-accent-bg);
      color: var(--callout-accent);
    }

    .callout-title {
      flex: 1;
      margin: 0;
      color: var(--callout-text);
      font-size: 1rem;
    }

    .toggle-icon {
      flex-shrink: 0;
      margin-left: auto;
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0.7;
      color: var(--callout-accent);
    }

    .callout-toggle[aria-expanded="true"] .toggle-icon {
      transform: rotate(180deg);
    }

    .callout-content {
      overflow: hidden;
      transition:
        height 0.3s cubic-bezier(0.4, 0, 0.2, 1),
        opacity 0.2s ease;
      height: auto;
      opacity: 1;
    }

    .collapsible .callout-content {
      height: 0;
      opacity: 0;
    }

    .collapsible .callout-content[data-expanded="true"] {
      opacity: 1;
    }

    .callout-body {
      padding: 0.2rem 1.5rem 0.5rem;
      font-size: 1rem;
    }

    /* Horizontal layout when no title - content next to icon */
    .new-callout:not(:has(.callout-title)) {
      display: flex;
      align-items: flex-start;
    }

    .new-callout:not(:has(.callout-title)) .callout-header {
      padding: 0.5rem 0 0.5rem 1rem;
      flex-shrink: 0;
    }

    .new-callout:not(:has(.callout-title)) .callout-content {
      flex: 1;
      padding-top: 0.75rem;
    }

    .new-callout:not(:has(.callout-title)) .callout-body {
      padding: 0 1rem 0.5rem 0.75rem;
    }

    /* Default variant */
    .variant-default {
      background: linear-gradient(
        135deg,
        var(--callout-accent-bg) 0%,
        color-mix(in srgb, var(--callout-accent) 12%, transparent) 100%
      );
      border: 1px solid var(--callout-accent-border);
      border-left: 4px solid var(--callout-accent);
      box-shadow: 0 1px 3px var(--callout-shadow);
    }

    .variant-default:hover {
      box-shadow: 0 4px 12px var(--callout-shadow-hover);
      transform: translateY(-1px);
    }

    /* Minimal variant */
    .variant-minimal {
      background: var(--callout-bg);
      border: none;
      border-left: 3px solid var(--callout-accent);
      box-shadow: 0 1px 2px var(--callout-shadow);
    }

    /* Filled variant */
    .variant-filled {
      background: color-mix(in srgb, var(--callout-accent) 80%, black);
      border: none;
      color: white;
    }

    .variant-filled .callout-title,
    .variant-filled .callout-body {
      color: white;
    }

    .variant-filled .callout-icon {
      background: rgba(255, 255, 255, 0.25);
      color: white;
    }

    /* Outline variant */
    .variant-outline {
      background: var(--callout-bg);
      border: 2px solid var(--callout-accent);
      box-shadow: none;
    }

    /* Type-specific color overrides */
    .callout-info {
      --callout-accent: var(--sl-color-blue, #3b82f6);
    }

    .callout-note {
      --callout-accent: var(--sl-color-purple, #a855f7);
    }

    .callout-danger {
      --callout-accent: var(--sl-color-red, #ef4444);
    }

    .callout-success {
      --callout-accent: var(--sl-color-green, #22c55e);
    }

    .new-callout.callout-success.variant-filled {
      --callout-accent: #16a34a !important;
    }

    .callout-warning {
      --callout-accent: var(--sl-color-orange, #f59e0b);
    }

    .new-callout.callout-warning.variant-filled {
      --callout-accent: #f97316 !important;
    }

    .callout-tip {
      --callout-accent: var(--sl-color-accent, #14b8a6);
    }

    .callout-quote {
      --callout-accent: var(--sl-color-gray-3, #64748b);
    }

    /* Content styling */
    :global(.new-callout .callout-body p:first-child) {
      margin-top: 0;
    }

    :global(.new-callout .callout-body p:last-child) {
      margin-bottom: 0;
    }

    :global(.new-callout .callout-body a) {
      color: var(--callout-accent);
      text-decoration: underline;
      text-underline-offset: 2px;
      font-weight: 500;
    }

    :global(.new-callout .callout-body a:hover) {
      opacity: 0.8;
    }

    :global(.new-callout .callout-body code) {
      background: color-mix(in srgb, var(--callout-accent) 10%, transparent);
      padding: 0.125rem 0.375rem;
      border-radius: 4px;
      font-size: 0.875em;
    }

    :global(.new-callout .callout-body strong) {
      font-weight: 600;
      color: var(--callout-accent);
    }
  }
</style>

<script>
  // Add collapsible functionality.
  document.addEventListener("DOMContentLoaded", () => {
    const toggleButtons = document.querySelectorAll(".callout-toggle");

    toggleButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const isExpanded = button.getAttribute("aria-expanded") === "true";
        const contentId = button.getAttribute("aria-controls");
        const content = document.getElementById(contentId);

        if (content) {
          const calloutBody = content.querySelector(".callout-body");

          if (!isExpanded) {
            // Opening.
            content.style.height = "auto";
            const height = calloutBody.offsetHeight;
            content.style.height = "0px";

            content.offsetHeight; // Force reflow.
            content.style.height = height + "px";

            button.setAttribute("aria-expanded", "true");
            content.setAttribute("data-expanded", "true");
          } else {
            // Closing.
            content.style.height = calloutBody.offsetHeight + "px";

            content.offsetHeight; // Force reflow.
            content.style.height = "0px";

            button.setAttribute("aria-expanded", "false");
            content.setAttribute("data-expanded", "false");
          }
        }
      });
    });

    // Initialize heights for expanded collapsible callouts.
    const expandedCallouts = document.querySelectorAll(
      '.collapsible .callout-content[data-expanded="true"]'
    );
    expandedCallouts.forEach((content) => {
      const calloutBody = content.querySelector(".callout-body");
      if (calloutBody) {
        content.style.height = calloutBody.offsetHeight + "px";
      }
    });
  });
</script>
