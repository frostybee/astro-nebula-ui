---
interface Props {
  title?: string;
  objectives: string[];
  interactive?: boolean;
  variant?: "default" | "outline" | "minimal";
  showProgress?: boolean;
  id?: string;
}

const { 
  title = "Learning Objectives", 
  objectives = [],
  interactive = false,
  variant = "default",
  showProgress = false,
  id = `learning-objectives-${Math.random().toString(36).substr(2, 9)}`
} = Astro.props;

// Generate unique IDs for each objective for accessibility
const objectiveIds = objectives.map((_, index) => `objective-${id}-${index}`);
---

<div class={`learning-objectives learning-objectives--${variant}`} id={id}>
  <div class="learning-objectives__header">
    <div class="learning-objectives__title-wrapper">
      <svg class="learning-objectives__icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 2L15.09 8.26L22 9L17 14L18.18 21L12 17.77L5.82 21L7 14L2 9L8.91 8.26L12 2Z"></path>
      </svg>
      <h3 class="learning-objectives__title">{title}</h3>
    </div>
    {showProgress && (
      <div class="learning-objectives__progress">
        <span class="learning-objectives__progress-text" id={`${id}-progress`}>0 of {objectives.length}</span>
        <div class="learning-objectives__progress-bar">
          <div class="learning-objectives__progress-fill" style="width: 0%"></div>
        </div>
      </div>
    )}
  </div>
  
  <div class="learning-objectives__content">
    <ul class="learning-objectives__list" role="list" aria-labelledby={`${id}-title`}>
      {objectives.map((objective, index) => (
        <li class="learning-objectives__item" key={index}>
          {interactive ? (
            <label class="learning-objectives__checkbox-wrapper" for={objectiveIds[index]}>
              <input 
                type="checkbox" 
                id={objectiveIds[index]}
                class="learning-objectives__checkbox"
                aria-describedby={`${id}-progress`}
              />
              <span class="learning-objectives__checkmark">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M13.5 4.5L6 12L2.5 8.5"></path>
                </svg>
              </span>
              <span class="learning-objectives__text">{objective}</span>
            </label>
          ) : (
            <div class="learning-objectives__item-wrapper">
              <span class="learning-objectives__bullet">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="8" cy="8" r="2"></circle>
                </svg>
              </span>
              <span class="learning-objectives__text">{objective}</span>
            </div>
          )}
        </li>
      ))}
    </ul>
  </div>
</div>

{interactive && (
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize learning objectives functionality for all instances
      const learningObjectivesContainers = document.querySelectorAll('.learning-objectives');
      
      learningObjectivesContainers.forEach(container => {
        const checkboxes = container.querySelectorAll('.learning-objectives__checkbox');
        const progressText = container.querySelector('.learning-objectives__progress-text');
        const progressFill = container.querySelector('.learning-objectives__progress-fill');
        const totalObjectives = checkboxes.length;
        
        // Load saved progress from localStorage
        const containerId = container.getAttribute('id');
        const savedProgress = localStorage.getItem(`learning-objectives-${containerId}`);
        if (savedProgress) {
          const progress = JSON.parse(savedProgress);
          checkboxes.forEach((checkbox, index) => {
            checkbox.checked = progress[index] || false;
            if (checkbox.checked) {
              checkbox.closest('.learning-objectives__item').classList.add('completed');
            }
          });
        }
        
        // Update progress display
        function updateProgress() {
          const checkedCount = container.querySelectorAll('.learning-objectives__checkbox:checked').length;
          const percentage = totalObjectives > 0 ? (checkedCount / totalObjectives) * 100 : 0;
          
          if (progressText) {
            progressText.textContent = `${checkedCount} of ${totalObjectives}`;
          }
          if (progressFill) {
            progressFill.style.width = `${percentage}%`;
          }
          
          // Save progress to localStorage
          const progress = Array.from(checkboxes).map(cb => cb.checked);
          localStorage.setItem(`learning-objectives-${containerId}`, JSON.stringify(progress));
          
          // Add completion animation
          if (checkedCount === totalObjectives && totalObjectives > 0) {
            container.classList.add('all-completed');
            setTimeout(() => container.classList.remove('all-completed'), 2000);
          }
        }
        
        // Add event listeners
        checkboxes.forEach((checkbox) => {
          checkbox.addEventListener('change', (e) => {
            const item = e.target.closest('.learning-objectives__item');
            if (e.target.checked) {
              item.classList.add('completed');
            } else {
              item.classList.remove('completed');
            }
            updateProgress();
          });
        });
        
        // Initial progress update
        updateProgress();
      });
    });
  </script>
)}

<style>
  .learning-objectives {
    background: var(--sl-color-bg-nav);
    border: 2px solid var(--sl-color-gray-5);
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1.5rem 0;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .learning-objectives::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--sl-color-accent), var(--sl-color-accent-high));
  }

  .learning-objectives--outline {
    background: transparent;
    border: 2px solid var(--sl-color-accent);
  }

  .learning-objectives--minimal {
    background: transparent;
    border: 1px solid var(--sl-color-gray-4);
    box-shadow: none;
    padding: 1rem;
  }

  .learning-objectives__header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
    gap: 1rem;
  }

  .learning-objectives__title-wrapper {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .learning-objectives__icon {
    color: var(--sl-color-accent);
    flex-shrink: 0;
  }

  .learning-objectives__title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--sl-color-white);
    line-height: 1.3;
  }

  .learning-objectives__progress {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.5rem;
    min-width: 120px;
  }

  .learning-objectives__progress-text {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--sl-color-gray-2);
  }

  .learning-objectives__progress-bar {
    width: 100px;
    height: 6px;
    background: var(--sl-color-gray-5);
    border-radius: 3px;
    overflow: hidden;
  }

  .learning-objectives__progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--sl-color-accent), var(--sl-color-accent-high));
    border-radius: 3px;
    transition: width 0.5s ease;
  }

  .learning-objectives__content {
    margin-top: 1rem;
  }

  .learning-objectives__list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .learning-objectives__item {
    transition: all 0.3s ease;
    position: relative;
  }

  .learning-objectives__item.completed {
    opacity: 0.7;
  }

  .learning-objectives__item.completed .learning-objectives__text {
    text-decoration: line-through;
    color: var(--sl-color-gray-2);
  }

  .learning-objectives__checkbox-wrapper {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .learning-objectives__checkbox-wrapper:hover {
    transform: translateX(4px);
  }

  .learning-objectives__checkbox {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  .learning-objectives__checkmark {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    background: transparent;
    border: 2px solid var(--sl-color-gray-3);
    border-radius: 4px;
    transition: all 0.3s ease;
    flex-shrink: 0;
    margin-top: 2px;
  }

  .learning-objectives__checkmark svg {
    opacity: 0;
    transform: scale(0.5);
    transition: all 0.2s ease;
    color: var(--sl-color-white);
  }

  .learning-objectives__checkbox:checked + .learning-objectives__checkmark {
    background: var(--sl-color-accent);
    border-color: var(--sl-color-accent);
    transform: scale(1.1);
  }

  .learning-objectives__checkbox:checked + .learning-objectives__checkmark svg {
    opacity: 1;
    transform: scale(1);
  }

  .learning-objectives__checkbox:focus + .learning-objectives__checkmark {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 2px;
  }

  .learning-objectives__item-wrapper {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
  }

  .learning-objectives__bullet {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    color: var(--sl-color-accent);
    flex-shrink: 0;
    margin-top: 2px;
  }

  .learning-objectives__text {
    font-size: 1rem;
    line-height: 1.5;
    color: var(--sl-color-white);
    transition: all 0.3s ease;
  }

  /* Animation for completion */
  .learning-objectives.all-completed::after {
    content: '🎉';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 3rem;
    animation: celebration 2s ease-in-out;
    pointer-events: none;
  }

  @keyframes celebration {
    0% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(0);
    }
    50% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1.2);
    }
    100% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(1);
    }
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .learning-objectives {
      padding: 1rem;
      margin: 1rem 0;
    }

    .learning-objectives__header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .learning-objectives__progress {
      align-items: flex-start;
      width: 100%;
    }

    .learning-objectives__progress-bar {
      width: 100%;
    }

    .learning-objectives__title {
      font-size: 1.125rem;
    }

    .learning-objectives__text {
      font-size: 0.9rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .learning-objectives {
      border-width: 3px;
    }

    .learning-objectives__checkmark {
      border-width: 3px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .learning-objectives,
    .learning-objectives__item,
    .learning-objectives__checkmark,
    .learning-objectives__checkbox-wrapper,
    .learning-objectives__progress-fill {
      transition: none;
    }

    .learning-objectives__checkbox-wrapper:hover {
      transform: none;
    }

    .learning-objectives.all-completed::after {
      animation: none;
    }
  }
</style>