---
interface Props {
  title: string;
  expanded?: boolean;
  variant?: "default" | "outline" | "ghost";
  theme?: "auto" | "light" | "dark";
}

const { title, expanded = false, variant = "default", theme = "auto" } = Astro.props;

// Generate unique ID for accessibility.
const panelId = `panel-${Math.random().toString(36).substr(2, 9)}`;
const headerId = `header-${panelId}`;
---

<div class={`collapsible-panel panel-${variant} theme-${theme}`}>
  <button 
    class="panel-header" 
    type="button"
    aria-expanded={expanded}
    aria-controls={panelId}
    id={headerId}
  >
    <span class="panel-title">{title}</span>
    <svg class="panel-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="m4 6 4 4 4-4"></path>
    </svg>
  </button>
  <div 
    class="panel-content" 
    id={panelId}
    aria-labelledby={headerId}
    data-expanded={expanded}
  >
    <div class="panel-body">
      <slot />
    </div>
  </div>
</div>

<style>
  @layer galaxy {
    /* CSS Custom Properties with Starlight integration and fallbacks. */
    .collapsible-panel {
      --panel-bg: var(--sl-color-bg, #ffffff);
      --panel-bg-hover: var(--sl-color-gray-6, #f8fafc);
      --panel-text: var(--sl-color-text, #1e293b);
      --panel-text-hover: var(--sl-color-text, #0f172a);
      --panel-border: var(--sl-color-gray-5, rgba(203, 213, 225, 0.2));
      --panel-accent: var(--sl-color-accent, #3b82f6);
      --panel-shadow: rgba(0, 0, 0, 0.05);
      --panel-shadow-hover: rgba(0, 0, 0, 0.1);
      --panel-shadow-depth: rgba(0, 0, 0, 0.03);
      --panel-gradient: linear-gradient(135deg, var(--panel-bg) 0%, color-mix(in srgb, var(--panel-bg) 95%, var(--panel-accent) 5%) 100%);
    }
    .collapsible-panel {
      border-radius: 16px;
      overflow: hidden;
      margin-bottom: 1.75rem;
      background: var(--panel-gradient);
      box-shadow: 
        0 1px 2px var(--panel-shadow-depth),
        0 2px 8px var(--panel-shadow),
        0 0 0 1px var(--panel-border);
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      backdrop-filter: blur(12px);
      position: relative;
    }

    .collapsible-panel:hover {
      box-shadow: 
        0 2px 4px var(--panel-shadow),
        0 8px 25px var(--panel-shadow-hover),
        0 0 0 1px color-mix(in srgb, var(--panel-border) 80%, var(--panel-accent) 20%);
      transform: translateY(-2px) scale(1.005);
    }

    .panel-header {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.75rem 1.25rem;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      text-align: left;
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      user-select: none;
      position: relative;
      z-index: 1;
      letter-spacing: -0.01em;
      line-height: 1.3;
    }

    .panel-header:focus-visible {
      outline: 2px solid var(--panel-accent);
      outline-offset: 2px;
      border-radius: 12px;
    }

    .panel-header:focus {
      outline: none;
    }

    .panel-title {
      flex: 1;
      margin: 0;
      font-feature-settings: "kern" 1, "liga" 1;
      transition: color 0.3s ease;
    }

    .panel-icon {
      flex-shrink: 0;
      margin-left: 0.75rem;
      transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), 
                  opacity 0.3s ease,
                  color 0.3s ease;
      transform: rotate(0deg);
      opacity: 0.7;
      color: var(--panel-accent);
      filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
    }

    .panel-header:hover .panel-icon {
      opacity: 1;
      transform: scale(1.1);
    }

    .panel-header[aria-expanded="true"] .panel-icon {
      transform: rotate(180deg);
      opacity: 1;
    }

    .panel-header[aria-expanded="true"]:hover .panel-icon {
      transform: rotate(180deg) scale(1.1);
    }

    .panel-content {
      overflow: hidden;
      transition: height 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
                  opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      height: 0;
      opacity: 0;
      position: relative;
    }

    .panel-content[data-expanded="true"] {
      opacity: 1;
    }

    .panel-body {
      padding: 0.5rem 1.5rem 1.5rem;
      line-height: 1.65;
      font-size: 0.975rem;
      color: color-mix(in srgb, var(--panel-text) 85%, transparent);
      position: relative;
    }

    .panel-body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 1.5rem;
      right: 1.5rem;
      height: 1px;
      background: linear-gradient(90deg, 
        transparent 0%, 
        color-mix(in srgb, var(--panel-border) 40%, transparent) 50%, 
        transparent 100%);
    }

    /* Default variant - uses Starlight variables with fallbacks. */
    .panel-default {
      background: var(--panel-gradient);
    }

    .panel-default .panel-header {
      background: linear-gradient(135deg, 
        color-mix(in srgb, var(--panel-bg) 98%, var(--panel-accent) 2%) 0%, 
        color-mix(in srgb, var(--panel-bg) 96%, var(--panel-accent) 4%) 100%);
      color: var(--panel-text);
      position: relative;
    }

    .panel-default .panel-header::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, 
        transparent 0%, 
        color-mix(in srgb, var(--panel-border) 60%, transparent) 50%, 
        transparent 100%);
    }

    .panel-default .panel-header:hover {
      background: linear-gradient(135deg, 
        color-mix(in srgb, var(--panel-bg-hover) 97%, var(--panel-accent) 3%) 0%, 
        color-mix(in srgb, var(--panel-bg-hover) 94%, var(--panel-accent) 6%) 100%);
      color: var(--panel-text-hover);
    }

    /* Outline variant - uses Starlight variables with fallbacks. */
    .panel-outline {
      background: color-mix(in srgb, var(--panel-bg) 5%, transparent);
      border: 1.5px solid var(--panel-border);
      backdrop-filter: blur(16px);
    }

    .panel-outline .panel-header {
      background: linear-gradient(135deg, 
        color-mix(in srgb, var(--panel-bg) 15%, transparent) 0%, 
        color-mix(in srgb, var(--panel-bg) 8%, transparent) 100%);
      color: var(--panel-text);
      position: relative;
    }

    .panel-outline .panel-header::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, 
        transparent 0%, 
        color-mix(in srgb, var(--panel-border) 40%, transparent) 50%, 
        transparent 100%);
    }

    .panel-outline .panel-header:hover {
      background: linear-gradient(135deg, 
        color-mix(in srgb, var(--panel-bg-hover) 20%, transparent) 0%, 
        color-mix(in srgb, var(--panel-bg-hover) 12%, transparent) 100%);
      color: var(--panel-text-hover);
    }

    /* Ghost variant - uses Starlight variables with fallbacks. */
    .panel-ghost {
      background: transparent;
      border: none;
      box-shadow: none;
      backdrop-filter: none;
    }

    .panel-ghost:hover {
      background: color-mix(in srgb, var(--panel-bg) 3%, transparent);
      box-shadow: 
        0 1px 3px rgba(0, 0, 0, 0.02),
        0 0 0 1px color-mix(in srgb, var(--panel-border) 20%, transparent);
      transform: translateY(-1px) scale(1.002);
    }

    .panel-ghost .panel-header {
      background: transparent;
      color: color-mix(in srgb, var(--panel-text) 75%, transparent);
      position: relative;
      font-weight: 600;
    }

    .panel-ghost .panel-header::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, 
        transparent 0%, 
        color-mix(in srgb, var(--panel-border) 30%, transparent) 50%, 
        transparent 100%);
    }

    .panel-ghost .panel-header:hover {
      background: color-mix(in srgb, var(--panel-bg-hover) 8%, transparent);
      color: var(--panel-text);
    }

    /* Fallback for non-Starlight environments - Dark theme support.   */
    .theme-dark .collapsible-panel {
      --panel-bg: #0f172a;
      --panel-bg-hover: #1e293b;
      --panel-text: #f8fafc;
      --panel-text-hover: #ffffff;
      --panel-border: rgba(51, 65, 85, 0.25);
      --panel-accent: #60a5fa;
      --panel-shadow: rgba(0, 0, 0, 0.4);
      --panel-shadow-hover: rgba(0, 0, 0, 0.6);
      --panel-shadow-depth: rgba(0, 0, 0, 0.2);
      --panel-gradient: linear-gradient(135deg, var(--panel-bg) 0%, color-mix(in srgb, var(--panel-bg) 92%, var(--panel-accent) 8%) 100%);
    }

    .theme-auto .collapsible-panel,
    @media (prefers-color-scheme: dark) {
      .theme-auto .collapsible-panel,
      .collapsible-panel {
        --panel-bg: var(--sl-color-bg, #0f172a);
        --panel-bg-hover: var(--sl-color-gray-6, #1e293b);
        --panel-text: var(--sl-color-text, #f8fafc);
        --panel-text-hover: var(--sl-color-text, #ffffff);
        --panel-border: var(--sl-color-gray-5, rgba(51, 65, 85, 0.25));
        --panel-accent: var(--sl-color-accent, #60a5fa);
        --panel-shadow: rgba(0, 0, 0, 0.4);
        --panel-shadow-hover: rgba(0, 0, 0, 0.6);
        --panel-shadow-depth: rgba(0, 0, 0, 0.2);
        --panel-gradient: linear-gradient(135deg, var(--panel-bg) 0%, color-mix(in srgb, var(--panel-bg) 92%, var(--panel-accent) 8%) 100%);
      }
    }

    /* Content styling.    */
    :global(.panel-body p:first-child) {
      margin-top: 0;
    }

    :global(.panel-body p:last-child) {
      margin-bottom: 0;
    }

    :global(.panel-body a) {
      color: var(--panel-accent);
      text-decoration: underline;
      text-underline-offset: 2px;
    }
  }
</style>

<script>
  // Add click event listeners for collapsible functionality with modern animations.
  document.addEventListener('DOMContentLoaded', () => {
    const headers = document.querySelectorAll('.panel-header');
    
    headers.forEach(header => {
      // Add subtle interaction feedback
      header.addEventListener('mousedown', () => {
        header.style.transform = 'scale(0.995)';
      });
      
      header.addEventListener('mouseup', () => {
        header.style.transform = '';
      });
      
      header.addEventListener('mouseleave', () => {
        header.style.transform = '';
      });
      
      header.addEventListener('click', () => {
        const isExpanded = header.getAttribute('aria-expanded') === 'true';
        const contentId = header.getAttribute('aria-controls');
        const content = document.getElementById(contentId);
        
        if (content) {
          const panelBody = content.querySelector('.panel-body');
          
          if (!isExpanded) {
            // Opening - smooth expand animation
            content.style.height = 'auto';
            const height = panelBody.offsetHeight;
            content.style.height = '0px';
            content.style.opacity = '0';
            
            // Force reflow then animate
            requestAnimationFrame(() => {
              content.style.height = height + 'px';
              content.style.opacity = '1';
              
              // Add subtle content reveal animation
              panelBody.style.transform = 'translateY(-8px)';
              panelBody.style.opacity = '0';
              
              setTimeout(() => {
                panelBody.style.transition = 'transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s ease';
                panelBody.style.transform = 'translateY(0)';
                panelBody.style.opacity = '1';
              }, 50);
            });
            
            header.setAttribute('aria-expanded', 'true');
            content.setAttribute('data-expanded', 'true');
          } else {
            // Closing - smooth collapse animation
            const currentHeight = content.offsetHeight;
            content.style.height = currentHeight + 'px';
            
            // Animate content out first
            panelBody.style.transition = 'transform 0.2s ease, opacity 0.2s ease';
            panelBody.style.transform = 'translateY(-4px)';
            panelBody.style.opacity = '0';
            
            setTimeout(() => {
              content.style.height = '0px';
              content.style.opacity = '0';
            }, 100);
            
            header.setAttribute('aria-expanded', 'false');
            content.setAttribute('data-expanded', 'false');
          }
        }
        
        // Remove focus after click but keep it accessible
        if (!header.matches(':focus-visible')) {
          header.blur();
        }
      });
      
      // Reset content animation styles when animation completes
      header.addEventListener('transitionend', () => {
        const contentId = header.getAttribute('aria-controls');
        const content = document.getElementById(contentId);
        if (content) {
          const panelBody = content.querySelector('.panel-body');
          if (header.getAttribute('aria-expanded') === 'false') {
            panelBody.style.transition = '';
            panelBody.style.transform = '';
            panelBody.style.opacity = '';
          }
        }
      });
    });
    
    // Initialize heights for expanded panels with smooth reveal
    const expandedPanels = document.querySelectorAll('.panel-content[data-expanded="true"]');
    expandedPanels.forEach((content, index) => {
      const panelBody = content.querySelector('.panel-body');
      content.style.height = panelBody.offsetHeight + 'px';
      
      // Stagger initial animations for multiple expanded panels
      setTimeout(() => {
        panelBody.style.opacity = '0';
        panelBody.style.transform = 'translateY(10px)';
        
        requestAnimationFrame(() => {
          panelBody.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.4s ease';
          panelBody.style.opacity = '1';
          panelBody.style.transform = 'translateY(0)';
        });
      }, index * 100);
    });
  });
</script>