---
interface Props {
  title: string;
  expanded?: boolean;
  variant?: "default" | "outline" | "ghost";
  theme?: "auto" | "light" | "dark";
}

const { title, expanded = false, variant = "default", theme = "auto" } = Astro.props;

// Generate unique ID for accessibility.
const panelId = `panel-${Math.random().toString(36).substr(2, 9)}`;
const headerId = `header-${panelId}`;
---

<div class={`collapsible-panel panel-${variant} theme-${theme}`}>
  <button 
    class="panel-header" 
    type="button"
    aria-expanded={expanded}
    aria-controls={panelId}
    id={headerId}
  >
    <span class="panel-title">{title}</span>
    <svg class="panel-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="m4 6 4 4 4-4"></path>
    </svg>
  </button>
  <div 
    class="panel-content" 
    id={panelId}
    aria-labelledby={headerId}
    data-expanded={expanded}
  >
    <div class="panel-body">
      <slot />
    </div>
  </div>
</div>

<style>
  @layer galaxy {
    /* CSS Custom Properties with Starlight integration and fallbacks. */
    .collapsible-panel {
      --panel-bg: var(--sl-color-bg, #ffffff);
      --panel-bg-hover: var(--sl-color-gray-6, #f8fafc);
      --panel-text: var(--sl-color-text, #1e293b);
      --panel-text-hover: var(--sl-color-text, #0f172a);
      --panel-border: var(--sl-color-gray-5, rgba(203, 213, 225, 0.3));
      --panel-accent: var(--sl-color-accent, #3b82f6);
      --panel-shadow: rgba(0, 0, 0, 0.12);
      --panel-shadow-hover: rgba(0, 0, 0, 0.15);
    }
    .collapsible-panel {
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 1.5rem;
      box-shadow: 0 1px 3px var(--panel-shadow), 0 1px 2px var(--panel-shadow);
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      backdrop-filter: blur(10px);
    }

    .collapsible-panel:hover {
      box-shadow: 0 3px 6px var(--panel-shadow-hover), 0 2px 4px var(--panel-shadow);
      transform: translateY(-1px);
    }

    .panel-header {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.375rem 1rem;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      text-align: left;
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      user-select: none;
      position: relative;
      z-index: 1;
    }

    .panel-header:focus-visible {
      outline: 2px solid var(--panel-accent);
      outline-offset: -2px;
    }

    .panel-header:focus {
      outline: none;
    }

    .panel-title {
      flex: 1;
      margin: 0;
    }

    .panel-icon {
      flex-shrink: 0;
      margin-left: 0.75rem;
      transition: transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      transform: rotate(0deg);
      opacity: 0.8;
    }

    .panel-header:hover .panel-icon {
      opacity: 1;
    }

    .panel-header[aria-expanded="true"] .panel-icon {
      transform: rotate(180deg);
    }

    .panel-content {
      overflow: hidden;
      transition: height 0.25s cubic-bezier(0.4, 0, 0.2, 1), 
                  opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      height: 0;
      opacity: 0;
    }

    .panel-content[data-expanded="true"] {
      opacity: 1;
    }

    .panel-body {
      padding: 0 1.25rem 1.25rem;
      line-height: 1.6;
    }

    /* Default variant - uses Starlight variables with fallbacks. */
    .panel-default {
      background: var(--panel-bg);
      border: 1px solid var(--panel-border);
    }

    .panel-default .panel-header {
      background: var(--sl-color-gray-6, #f1f5f9);
      color: var(--panel-text);
      border-bottom: 1px solid var(--panel-border);
    }

    .panel-default .panel-header:hover {
      background: var(--panel-bg-hover);
      color: var(--panel-text-hover);
    }

    /* Outline variant - uses Starlight variables with fallbacks. */
    .panel-outline {
      background: color-mix(in srgb, var(--panel-bg) 10%, transparent);
      border: 2px solid var(--panel-border);
      backdrop-filter: blur(5px);
    }

    .panel-outline .panel-header {
      background: var(--sl-color-gray-6, #f1f5f9);
      color: var(--panel-text);
      border-bottom: 1px solid var(--panel-border);
    }

    .panel-outline .panel-header:hover {
      background: color-mix(in srgb, var(--panel-bg-hover) 15%, transparent);
      color: var(--panel-text-hover);
    }

    /* Ghost variant - uses Starlight variables with fallbacks. */
    .panel-ghost {
      background: transparent;
      border: none;
      box-shadow: none;
    }

    .panel-ghost .panel-header {
      background: transparent;
      color: var(--sl-color-gray-3, #64748b);
      border-bottom: 1px solid color-mix(in srgb, var(--panel-border) 50%, transparent);
      font-weight: 500;
    }

    .panel-ghost .panel-header:hover {
      background: color-mix(in srgb, var(--panel-bg-hover) 10%, transparent);
      color: var(--panel-text);
      border-bottom: 1px solid var(--panel-border);
    }

    /* Fallback for non-Starlight environments - Dark theme support.   */
    .theme-dark .collapsible-panel {
      --panel-bg: #1e293b;
      --panel-bg-hover: #334155;
      --panel-text: #f1f5f9;
      --panel-text-hover: #ffffff;
      --panel-border: rgba(71, 85, 105, 0.3);
      --panel-accent: #60a5fa;
      --panel-shadow: rgba(0, 0, 0, 0.3);
      --panel-shadow-hover: rgba(0, 0, 0, 0.4);
    }

    .theme-auto .collapsible-panel,
    @media (prefers-color-scheme: dark) {
      .theme-auto .collapsible-panel,
      .collapsible-panel {
        --panel-bg: var(--sl-color-bg, #1e293b);
        --panel-bg-hover: var(--sl-color-gray-6, #334155);
        --panel-text: var(--sl-color-text, #f1f5f9);
        --panel-text-hover: var(--sl-color-text, #ffffff);
        --panel-border: var(--sl-color-gray-5, rgba(71, 85, 105, 0.3));
        --panel-accent: var(--sl-color-accent, #60a5fa);
        --panel-shadow: rgba(0, 0, 0, 0.3);
        --panel-shadow-hover: rgba(0, 0, 0, 0.4);
      }
    }

    /* Content styling.    */
    :global(.panel-body p:first-child) {
      margin-top: 0;
    }

    :global(.panel-body p:last-child) {
      margin-bottom: 0;
    }

    :global(.panel-body a) {
      color: var(--panel-accent);
      text-decoration: underline;
      text-underline-offset: 2px;
    }
  }
</style>

<script>
  // Add click event listeners for collapsible functionality.
  document.addEventListener('DOMContentLoaded', () => {
    const headers = document.querySelectorAll('.panel-header');
    
    headers.forEach(header => {
      header.addEventListener('click', () => {
        const isExpanded = header.getAttribute('aria-expanded') === 'true';
        const contentId = header.getAttribute('aria-controls');
        const content = document.getElementById(contentId);
        
        if (content) {
          const panelBody = content.querySelector('.panel-body');
          
          if (!isExpanded) {
            // Opening - measure content height.
            content.style.height = 'auto';
            const height = panelBody.offsetHeight;
            content.style.height = '0px';
            
            // Force reflow then animate to target height.
            content.offsetHeight;
            content.style.height = height + 'px';
            
            header.setAttribute('aria-expanded', 'true');
            content.setAttribute('data-expanded', 'true');
          } else {
            // Closing - animate to 0.
            content.style.height = panelBody.offsetHeight + 'px';
            
            // Force reflow then animate to 0.
            content.offsetHeight;
            content.style.height = '0px';
            
            header.setAttribute('aria-expanded', 'false');
            content.setAttribute('data-expanded', 'false');
          }
        }
        
        // Remove focus after click to prevent outline.
        header.blur();
      });
    });
    
    // Initialize heights for expanded panels.
    const expandedPanels = document.querySelectorAll('.panel-content[data-expanded="true"]');
    expandedPanels.forEach(content => {
      const panelBody = content.querySelector('.panel-body');
      content.style.height = panelBody.offsetHeight + 'px';
    });
  });
</script>